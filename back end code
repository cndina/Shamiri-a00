/ Back end Node.js/ Express with typescript

/ PROJECT SETUP

mkdir journal-backend
cd journal-backend
npm init -y
npm install express typescript ts-node-dev @types/express pg typeorm reflect-metadata class-validator
npx tsc --init

/TYPESCRIPT CONFIGURATION

{
"compilerOptions": {
"target": "ES2020",
"module": "commonjs",
"outDir": "./dist",
"rootDir": "./src",
"strict": true,
"esModuleInterop": true,
"skipLibCheck": true,
"forceConsistentCasingInFileNames": true
}
}

/ EXPRESS SERVER SETUP

// src/index.ts
import 'reflect-metadata';
import express from 'express';
import { createConnection } from 'typeorm';

const app = express();
app.use(express.json());

createConnection().then(() => {
app.listen(3000, () => {
console.log('Server is running on port 3000');
});
}).catch(error => console.log(error));

/ USER MANAGRMENT
//User entity

// src/entity/User.ts
import { Entity, PrimaryGeneratedColumn, Column, BaseEntity } from 'typeorm';
import { Length, IsEmail } from 'class-validator';

@entity()
export class User extends BaseEntity {
@PrimaryGeneratedColumn()
id: number;

@column()
@Length(4, 20)
username: string;

@column()
password: string;

@column({ unique: true })
@isemail()
email: string;
}

//User controller
// src/controllers/UserController.ts
import { Request, Response } from 'express';
import { User } from '../entity/User';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';

export class UserController {
static async signUp(req: Request, res: Response) {
const { username, password, email } = req.body;

const user = new User();
user.username = username;
user.password = bcrypt.hashSync(password, 8);
user.email = email;

await user.save();

res.status(201).send({ message: 'User created successfully' });
}

static async login(req: Request, res: Response) {
const { username, password } = req.body;

const user = await User.find